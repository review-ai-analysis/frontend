{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Vladislav\\\\Desktop\\\\light-blue-react-template\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Vladislav\\\\Desktop\\\\light-blue-react-template\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar TinyQueue = /*#__PURE__*/function () {\n  function TinyQueue() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var compare = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultCompare;\n\n    _classCallCheck(this, TinyQueue);\n\n    this.data = data;\n    this.length = this.data.length;\n    this.compare = compare;\n\n    if (this.length > 0) {\n      for (var i = (this.length >> 1) - 1; i >= 0; i--) {\n        this._down(i);\n      }\n    }\n  }\n\n  _createClass(TinyQueue, [{\n    key: \"push\",\n    value: function push(item) {\n      this.data.push(item);\n      this.length++;\n\n      this._up(this.length - 1);\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      if (this.length === 0) return undefined;\n      var top = this.data[0];\n      var bottom = this.data.pop();\n      this.length--;\n\n      if (this.length > 0) {\n        this.data[0] = bottom;\n\n        this._down(0);\n      }\n\n      return top;\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this.data[0];\n    }\n  }, {\n    key: \"_up\",\n    value: function _up(pos) {\n      var data = this.data,\n          compare = this.compare;\n      var item = data[pos];\n\n      while (pos > 0) {\n        var parent = pos - 1 >> 1;\n        var current = data[parent];\n        if (compare(item, current) >= 0) break;\n        data[pos] = current;\n        pos = parent;\n      }\n\n      data[pos] = item;\n    }\n  }, {\n    key: \"_down\",\n    value: function _down(pos) {\n      var data = this.data,\n          compare = this.compare;\n      var halfLength = this.length >> 1;\n      var item = data[pos];\n\n      while (pos < halfLength) {\n        var left = (pos << 1) + 1;\n        var best = data[left];\n        var right = left + 1;\n\n        if (right < this.length && compare(data[right], best) < 0) {\n          left = right;\n          best = data[right];\n        }\n\n        if (compare(best, item) >= 0) break;\n        data[pos] = best;\n        pos = left;\n      }\n\n      data[pos] = item;\n    }\n  }]);\n\n  return TinyQueue;\n}();\n\nexport { TinyQueue as default };\n\nfunction defaultCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}","map":null,"metadata":{},"sourceType":"module"}