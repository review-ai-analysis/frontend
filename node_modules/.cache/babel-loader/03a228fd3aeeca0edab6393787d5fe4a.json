{"ast":null,"code":"import { toast } from 'react-toastify';\nexport var REGISTER_REQUEST = 'REGISTER_REQUEST';\nexport var REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport var REGISTER_FAILURE = 'REGISTER_FAILURE';\nexport function receiveRegister() {\n  return {\n    type: REGISTER_SUCCESS\n  };\n}\nexport function registerError(payload) {\n  return {\n    type: REGISTER_FAILURE,\n    payload: payload\n  };\n}\nexport function registerUser(payload) {\n  return function (dispatch) {\n    if (payload.creds.email.length > 0 && payload.creds.password.length > 0) {\n      toast.success(\"You've been registered successfully\");\n      payload.history.push('/login');\n    } else {\n      dispatch(registerError('Something was wrong. Try again'));\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Vladislav/Desktop/SmartCitySirius/site/src/actions/register.js"],"names":["toast","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","receiveRegister","type","registerError","payload","registerUser","dispatch","creds","email","length","password","success","history","push"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,gBAApB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,SAASC,eAAT,GAA2B;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAEH;AADH,GAAP;AAGH;AAED,OAAO,SAASI,aAAT,CAAuBC,OAAvB,EAAgC;AACnC,SAAO;AACHF,IAAAA,IAAI,EAAEF,gBADH;AAEHI,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH;AAED,OAAO,SAASC,YAAT,CAAsBD,OAAtB,EAA+B;AAClC,SAAO,UAACE,QAAD,EAAc;AACjB,QAAIF,OAAO,CAACG,KAAR,CAAcC,KAAd,CAAoBC,MAApB,GAA6B,CAA7B,IAAkCL,OAAO,CAACG,KAAR,CAAcG,QAAd,CAAuBD,MAAvB,GAAgC,CAAtE,EAAyE;AACrEZ,MAAAA,KAAK,CAACc,OAAN,CAAc,qCAAd;AACAP,MAAAA,OAAO,CAACQ,OAAR,CAAgBC,IAAhB,CAAqB,QAArB;AACH,KAHD,MAGO;AACHP,MAAAA,QAAQ,CAACH,aAAa,CAAC,gCAAD,CAAd,CAAR;AACH;AACJ,GAPD;AAQH","sourcesContent":["import {toast} from 'react-toastify';\r\n\r\nexport const REGISTER_REQUEST = 'REGISTER_REQUEST';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAILURE = 'REGISTER_FAILURE';\r\n\r\nexport function receiveRegister() {\r\n    return {\r\n        type: REGISTER_SUCCESS\r\n    };\r\n}\r\n\r\nexport function registerError(payload) {\r\n    return {\r\n        type: REGISTER_FAILURE,\r\n        payload,\r\n    };\r\n}\r\n\r\nexport function registerUser(payload) {\r\n    return (dispatch) => {\r\n        if (payload.creds.email.length > 0 && payload.creds.password.length > 0) {\r\n            toast.success(\"You've been registered successfully\");\r\n            payload.history.push('/login');\r\n        } else {\r\n            dispatch(registerError('Something was wrong. Try again'));\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}